@model SysExportSet
@{
    ViewBag.Title = "编辑导出设置";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutEditDialog.cshtml";
}

@Scripts.Render("~/bundles/jqueryAjax")

@using EasyCms.Model


<form id="form1">
    <!--内容-->
    <div id="floatHead" class="content-tab-wrap">
        <div class="content-tab">
            <div class="content-tab-ul-wrap">
                <ul>
                    <li><a class="selected" href="javascript:;">基本信息</a></li>
                    <li><a href="javascript:;">明细信息</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="tab-content">


        @HelperExtend.HiddenFor("ID", Model.ID)
        @HelperExtend.HiddenFor("RecordStatus", Model.RecordStatus.ToString())
        @Html.ValidationSummary()


        @HelperExtend.TextBox("Code", "编号", defaultval: Model.Code, hint: "")

        @HelperExtend.TextBox("Name", "名称", defaultval: Model.Name, hint: "")
        @HelperExtend.RadioGroup("ShowTableCaption", "是否显示表头", "true,false", "显示,不显示", defaultval: Model.ShowTableCaption, hint: "导出的excle标题头是否显示")
        @HelperExtend.TextArea("SqlStr", "取数Sql", defaultval: Model.SqlStr, hint: "")
        @HelperExtend.TextArea("Note", "备注", defaultval: Model.Note, hint: "")

    </div>

    <div class="tab-content" style="display:none">
        <div style="color:red; line-height:2">*注：<br />合并行：当某一列里相邻行的值相同时，可以合并单元格<br />
            是主键：在合并行判断相邻的值是否相等时，并额外判断当前主键列的值是否相等，主键值也相等时，才可以合并单元格<br />
            不导出：不导出excle<br />
            对应表头合并组：复杂标题头，比如多个列可以合并成一个列表头<br />
            对应表头合并组标题：复杂标题列的标题名，当前组的列中只要有一个列标明了即可<br />
        </div>
        <div id="jqxgrid"></div>

    </div>

    <!--工具栏-->
    <div class="page-footer">
        <div class="btn-wrap">
            <input type="button" onclick="PostToServer(true); return false;" value="保存后继续新增" class="btn" />
            <input type="submit" onclick="PostToServer(false); return false;" value="提交保存" class="btn" />
            <input name="btnReturn" type="button" value="返回上一页" class="btn yellow" onclick="javascript:history.back(-1);" />
        </div>
    </div>
    <!--/工具栏-->
</form>
@section  scripts{


    <script type="text/javascript">
        // 将form中的值转换为键值对。
        // 形如：{name:'aaa',password:'tttt'}
        // ps:注意将同名的放在一个数组里
        function getFormJson(frm) {
            var o = {};
            var a = $(frm).serializeArray();
            $.each(a, function () {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        }

        function PostToServer(isContinueAdd) {
            if ($("form").valid()) {
                var d = getFormJson("#form1");
                d.mxList = $("#jqxgrid").jqxGrid("source").cachedrecords;
                $.ajax({
                    url: "@Url.Action("Save")",
                    type: "POST",
                    data: d,
                    dataType: "json",
                    success: function (d) {
                        if (d.IsSuccess) {
                            SucessMsg("保存成功");
                            if (isContinueAdd) {
                                $("#ID").val("");
                                $("#Code").val("");
                                $("#Name").val("");
                                $("#SqlStr").val("");
                                $("#Note").val("");
                            } else {
                                $("#ID").val(d.data);
                            }
                        } else {
                            ErrorMsg(d.Msg);
                        }
                    }
                });
            }
            else { ErrorMsg("表单输入有误"); }


        }
        $(function () {


            //初始化表单验证
            $("form").validate({
                ignore: "",
                rules: {
                    "Code": {
                        required: true,
                        maxlength: 50,
                        remote: {
                            url: '@Url.Action("CheckRepeat")',
                            data: {
                                ID: function () { return $("#ID").val(); },

                                RecordStatus: function () { return $("#RecordStatus").val(); },
                                val: function () { return $("#Code").val(); }
                            }
                        }
                    },
                    Name: {
                        required: true,
                        maxlength: 100,
                        remote: {
                            url: '@Url.Action("CheckRepeat")',
                            data: {
                                ID: function () { return $("#ID").val(); },
                                ParentID: function () { return $("#ParentID").val(); },
                                RecordStatus: function () { return $("#RecordStatus").val(); },
                                val: function () { return $("#Name").val(); },
                                IsCode: false
                            }
                        }
                    },
                    ClassTypeID: { required: true },
                    Note: {
                        maxlength: 500
                    }
                },
                messages: {
                    Code: {
                        required: "请输入编号",
                        maxlength: $.validator.format("编号长度不能大于{0}个字符"),
                        remote: "同级分类下编号重复"
                    },
                    Name: {
                        required: "请输入名称",
                        maxlength: $.validator.format("名称长度不能大于{0}个字符"),
                        remote: "同级分类下名称重复"
                    }
                },
                errorPlacement: errorPlace
            });
        })
    </script>

    <script type="text/javascript">
        $(document).ready(function () {

            var url = "@Url.Action("GetMxList")";

            var ShowTypes = [];
            var AggregateTypes = [];
            var AlignTypes = [];
            @{

                List<Sharp.Common.EnumEnity> ShowTypelist = Sharp.Common.CommonUtils.PhraseEnumToList<ShowType>();
                foreach (var item in ShowTypelist)
	{
		 <text>
            ShowTypes.push({ ID: "@item.ID", Name: "@item.Name" });

            </text>

    } List<Sharp.Common.EnumEnity> AggregateTypelist = Sharp.Common.CommonUtils.PhraseEnumToList<AggregateType>();
                foreach (var item in AggregateTypelist)
	{
		 <text>
            AggregateTypes.push({ ID: "@item.ID", Name: "@item.Name" });

            </text>

    } List<Sharp.Common.EnumEnity> AlignTypelist = Sharp.Common.CommonUtils.PhraseEnumToList<AlignType>();
                foreach (var item in AlignTypelist)
	{
		 <text>
            AlignTypes.push({ ID: "@item.ID", Name: "@item.Name" });

            </text>

    }

            }
            var ShowTypeSource =

          {

              datatype: "array",

              datafields: [
                  { name: 'ID', type: 'string' },
                  { name: 'Name', type: 'string' }
              ],
              localdata: ShowTypes

          };
            var ShowTypeAdapter = new $.jqx.dataAdapter(ShowTypeSource, {
                autoBind: true
            });
            var AggregateTypeSource =

          {

              datatype: "array",

              datafields: [
                  { name: 'ID', type: 'string' },
                  { name: 'Name', type: 'string' }
              ],
              localdata: AggregateTypes

          };
            var AggregateTypeAdapter = new $.jqx.dataAdapter(AggregateTypeSource, {
                autoBind: true
            });
            var AlignTypeSource =

          {

              datatype: "array",

              datafields: [
                  { name: 'ID', type: 'string' },
                  { name: 'Name', type: 'string' }
              ],
              localdata: AlignTypes

          };
            var AlignTypeAdapter = new $.jqx.dataAdapter(AlignTypeSource, {
                autoBind: true
            });
            var datafields = [
    { name: 'ID' },
    { name: 'Code' },
    { name: 'Name' },
    { name: 'SourcTable' },
    { name: 'ShowType' },
    { name: 'AggregateType' },
    { name: 'AlignType' },
    { name: 'OrderNo' },
    { name: 'GroupCode' },
    { name: 'GroupName' },
    { name: 'MID' },
    { name: 'FormatType' },
      { name: 'IsMergeRow', type: "bool" },
      { name: 'IsKey', type: "bool" },

            { name: 'NotExport', type: "bool" },
    { name: 'ShowTypeName', value: 'ShowType', values: { source: ShowTypeAdapter.records, value: 'ID', name: 'Name' } },
    { name: 'AggregateTypeName', value: 'AggregateType', values: { source: AggregateTypeAdapter.records, value: 'ID', name: 'Name' } },
    { name: 'AlignTypeName', value: 'AlignType', values: { source: AlignTypeAdapter.records, value: 'ID', name: 'Name' } }

            ];
            var columns = [
    { text: '编号', dataField: 'Code', cellsalign: "left", width: 150 },

    { text: '名称', dataField: 'Name', cellsalign: "left", width: 150 },

    { text: '所属表', dataField: 'SourcTable', cellsalign: "left", width: 100 },

    {
        text: '类型', dataField: 'ShowType', width: 50, columntype: 'dropdownlist', displayfield: 'ShowTypeName', createeditor: function (row, value, editor) {
            editor.jqxDropDownList({ source: ShowTypeAdapter, displayMember: 'Name', valueMember: 'ID' });

        }

    },
      {
          text: '对齐', dataField: 'AlignType', width: 50, columntype: 'dropdownlist', displayfield: 'AlignTypeName', createeditor: function (row, value, editor) {
              editor.jqxDropDownList({ source: AlignTypeAdapter, displayMember: 'Name', valueMember: 'ID' });

          }
      },
      { text: '格式', dataField: 'FormatType', width: 60 },
        { text: '合并行', dataField: 'IsMergeRow', columntype: 'checkbox', width: 50 },
      { text: '是主键', dataField: 'IsKey', columntype: 'checkbox', width: 50 },
         { text: '不导出', dataField: 'NotExport', columntype: 'checkbox', width: 50 },

    {
        text: '聚合', dataField: 'AggregateType', width: 50, columntype: 'dropdownlist', displayfield: 'AggregateTypeName', createeditor: function (row, value, editor) {
            editor.jqxDropDownList({ source: AggregateTypeAdapter, displayMember: 'Name', valueMember: 'ID' });

        }
    },


    { text: '顺序', dataField: 'OrderNo', cellsalign: "left", width: 50 },

    { text: '对应表头合并组', dataField: 'GroupCode', cellsalign: "left" },

    { text: '对应表头合并组标题', dataField: 'GroupName', cellsalign: "left" }


            ];
            CreateGrid("jqxgrid", url, datafields, columns, {
                data: {

                    addrow: function (rowid, rowdata, position, commit) {

                        // synchronize with the server - send insert command

                        // call commit with parameter true if the synchronization with the server is successful

                        //and with parameter false if the synchronization failed.

                        // you can pass additional argument to the commit callback which represents the new ID if it is generated from a DB.

                        commit(true);

                    },

                    deleterow: function (rowid, commit) {

                        // synchronize with the server - send delete command

                        // call commit with parameter true if the synchronization with the server is successful

                        //and with parameter false if the synchronization failed.

                        commit(true);

                    }
                }, adapter: {
                    formatData: function (data) {
                        data.id = $("#ID").val();
                    }

                },
                grid: {
                    editable: true,
                    autoheight: true,
                    pageable: false,
                    selectionmode: 'singlecell',
                    editmode: 'click',
                    showtoolbar: true, rendertoolbar: function (toolbar) {

                        var me = this;

                        var container = $("<div style='margin: 5px;'></div>");

                        toolbar.append(container);
                        container.append('<input id="ReAdd" type="button" value="根据取数sql自动加载" />');
                        container.append('<input id="addrowbutton" type="button" value="添加新行" />');
                        container.append('<input style="margin-left: 5px;" id="deleterowbutton" type="button" value="移除一行" />');
                        $("#ReAdd").jqxButton();
                        $("#addrowbutton").jqxButton();
                        $("#deleterowbutton").jqxButton();
                        $("#ReAdd").on('click', function () {
                            var talbe = $("#SqlStr").val();
                            $.post("@Url.Action("AddMx")", { tableName: talbe }, function (result) {
                                if (result.IsSuccess) {
                                    var rows = $.parseJSON(result.data).Rows;
                                    $("#jqxgrid").jqxGrid('beginupdate');
                                    for (var i = 0; i < rows.length; i++) {

                                        $("#jqxgrid").jqxGrid('addrow', null, rows[i]);
                                    }
                                    $("#jqxgrid").jqxGrid('endupdate');

                                } else {
                                    ErrorMsg(result.Msg);

                                }

                            })

                        });
                        // create new row.

                        $("#addrowbutton").on('click', function () {
                            var datarow = generaterow();
                            var commit = $("#jqxgrid").jqxGrid('addrow', null, datarow);
                        });
                        // delete row.

                        $("#deleterowbutton").on('click', function () {


                            var cell = $('#jqxgrid').jqxGrid('getselectedcell');
                            var selectedrowindex = cell.rowindex;
                            var rowscount = $("#jqxgrid").jqxGrid('getdatainformation').rowscount;

                            if (selectedrowindex >= 0 && selectedrowindex < rowscount) {

                                var id = $("#jqxgrid").jqxGrid('getrowid', selectedrowindex);
                                var commit = $("#jqxgrid").jqxGrid('deleterow', id);
                            }

                        });

                    }
                }
            });


        });
        var generaterow = function (i) {
            var rows = $('#jqxgrid').jqxGrid('getrows');
            var row = {};
            row["ID"] = "";
            row["Code"] = "";
            row["Name"] = "";
            row["SourcTable"] = "";
            row["ShowType"] = "";
            row["IsMergeRow"] = false;
            row["IsKey"] = false;
            row["NotExport"] = false;
            row["AggregateType"] = "";
            row["AlignType"] = "";
            row["OrderNo"] = rows.length;
            row["GroupCode"] = "";
            row["GroupName"] = "";
            row["MID"] = "";
            row["FormatType"] = "";
            return row;

        }
    </script>
} 